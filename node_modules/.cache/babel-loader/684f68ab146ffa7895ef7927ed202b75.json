{"ast":null,"code":"var _jsxFileName = \"/Users/bitnalee/Desktop/github/site/react-exercises/src/Lectures/Pagination/Users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Buttons from \"./Components/Buttons\";\nimport CardList from \"./Components/CardList/CardList\";\nimport \"./Users.scss\";\n/**********************************************************\n  \n  현재 https://node-pagnation.herokuapp.com/users 에서 전체 데이터를 받아오고 있습니다\n  하지만 데이터가 너무 많네요! 20개 씩 끊어서 보여주면 좋겠습니다.\n  offset, limit 개념을 활용하여 페이지네이션을 구현해주세요.\n  \n  - 백엔드에서 offset 과 limit 이라는 \"키값\"을 통해 데이터를 끊어서 보내줄 준비가 되어있습니다. \n  - 쿼리스트링을 사용해 limit와, offset을 바꿔가며 요청을 보내보세요.\n\n  - 선택된 페이지의 버튼은 Buttons.scss에 준비된,\n    selected 클래스명을 활용해 현재 페이지와 일치할 경우 스타일링 될 수 있도록 해주세요.\n\n***********************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Users() {\n  _s();\n\n  const [users, setUsers] = useState([]); // 데이터 로딩\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/users\").then(res => res.json()).then(res => setUsers(res.users));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"photos\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mini Project - Pagination\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Users, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n\n_c = Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["/Users/bitnalee/Desktop/github/site/react-exercises/src/Lectures/Pagination/Users.js"],"names":["React","useState","useEffect","Buttons","CardList","Users","users","setUsers","fetch","then","res","json"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAO,cAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CAD8B,CAG9B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAASH,QAAQ,CAACG,GAAG,CAACJ,KAAL,CAFzB;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAjBuBD,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Buttons from \"./Components/Buttons\";\nimport CardList from \"./Components/CardList/CardList\";\nimport \"./Users.scss\";\n\n/**********************************************************\n  \n  현재 https://node-pagnation.herokuapp.com/users 에서 전체 데이터를 받아오고 있습니다\n  하지만 데이터가 너무 많네요! 20개 씩 끊어서 보여주면 좋겠습니다.\n  offset, limit 개념을 활용하여 페이지네이션을 구현해주세요.\n  \n  - 백엔드에서 offset 과 limit 이라는 \"키값\"을 통해 데이터를 끊어서 보내줄 준비가 되어있습니다. \n  - 쿼리스트링을 사용해 limit와, offset을 바꿔가며 요청을 보내보세요.\n\n  - 선택된 페이지의 버튼은 Buttons.scss에 준비된,\n    selected 클래스명을 활용해 현재 페이지와 일치할 경우 스타일링 될 수 있도록 해주세요.\n\n***********************************************************/\n\nexport default function Users() {\n  const [users, setUsers] = useState([]);\n\n  // 데이터 로딩\n  useEffect(() => {\n    fetch(\"http://localhost:8000/users\")\n      .then((res) => res.json())\n      .then((res) => setUsers(res.users));\n  }, []);\n\n  return (\n    <div className=\"photos\">\n      <h1>Mini Project - Pagination</h1>\n      <Buttons />\n      <CardList users={users} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}